import { NextResponse } from "next/server";
import { PrismaClient, Prisma } from "@prisma/client";

const prisma = new PrismaClient();

// ðŸ“Œ RÃ©cupÃ©rer toutes les inscriptions
export async function GET() {
  console.log("âœ… Route GET /api/enrollments appelÃ©e !");
  
  try {
    const enrollments = await prisma.enrollment.findMany({
      include: {
        student: { select: { id: true, name: true, email: true } },
        course: { select: { id: true, title: true } }
      }
    });

    console.log("ðŸ“œ Inscriptions rÃ©cupÃ©rÃ©es :", enrollments);
    return NextResponse.json(enrollments);
  } catch (error) {
    console.error("ðŸš¨ Erreur lors de la rÃ©cupÃ©ration des inscriptions :", error);
    return NextResponse.json({ error: "Erreur serveur" }, { status: 500 });
  }
}

// ðŸ“Œ Inscription Ã  un cours
export async function POST(req: Request) {
  console.log("ðŸ“Œ RequÃªte POST reÃ§ue sur /api/enrollments");

  try {
    const body = await req.json();
    console.log("ðŸ“© DonnÃ©es reÃ§ues :", body);

    if (!body.studentId || !body.courseId) {
      console.error("ðŸš¨ Erreur : ID Ã©tudiant ou ID cours manquant !");
      return NextResponse.json({ error: "ID Ã©tudiant et ID cours requis" }, { status: 400 });
    }

    // VÃ©rifier si l'Ã©tudiant existe
    const studentExists = await prisma.user.findUnique({
      where: { id: body.studentId }
    });

    if (!studentExists) {
      return NextResponse.json({ error: "Ã‰tudiant non trouvÃ©" }, { status: 404 });
    }

    // VÃ©rifier si le cours existe
    const courseExists = await prisma.course.findUnique({
      where: { id: body.courseId }
    });

    if (!courseExists) {
      return NextResponse.json({ error: "Cours non trouvÃ©" }, { status: 404 });
    }

    // VÃ©rifier si l'Ã©tudiant est dÃ©jÃ  inscrit
    const existingEnrollment = await prisma.enrollment.findUnique({
      where: {
        studentId_courseId: {
          studentId: body.studentId,
          courseId: body.courseId,
        },
      },
    });

    if (existingEnrollment) {
      return NextResponse.json({ error: "L'Ã©tudiant est dÃ©jÃ  inscrit Ã  ce cours" }, { status: 400 });
    }

    // ðŸ”¥ CrÃ©ation de l'inscription
    const newEnrollment = await prisma.enrollment.create({
      data: {
        studentId: body.studentId,
        courseId: body.courseId,
        status: "En cours",
      },
    });

    console.log("âœ… Inscription rÃ©ussie :", newEnrollment);
    return NextResponse.json(newEnrollment, { status: 201 });
  } catch (error: unknown) {
    console.error("ðŸš¨ Erreur lors de l'inscription :", error);

    if (error instanceof Prisma.PrismaClientKnownRequestError) {
      return NextResponse.json({ error: "Erreur Prisma", details: error.message }, { status: 400 });
    }

    return NextResponse.json({ error: "Erreur serveur" }, { status: 500 });
  }
}

// ðŸ“Œ DÃ©sinscription d'un Ã©tudiant d'un cours
export async function DELETE(req: Request) {
  console.log("ðŸ“Œ RequÃªte DELETE reÃ§ue sur /api/enrollments");

  try {
    const { searchParams } = new URL(req.url);
    const studentId = searchParams.get("studentId");
    const courseId = searchParams.get("courseId");

    if (!studentId || !courseId) {
      console.error("ðŸš¨ Erreur : ID Ã©tudiant ou ID cours manquant !");
      return NextResponse.json({ error: "ID Ã©tudiant et ID cours requis" }, { status: 400 });
    }

    // VÃ©rifier si l'inscription existe
    const existingEnrollment = await prisma.enrollment.findUnique({
      where: {
        studentId_courseId: {
          studentId,
          courseId,
        },
      },
    });

    if (!existingEnrollment) {
      return NextResponse.json({ error: "Inscription non trouvÃ©e" }, { status: 404 });
    }

    // ðŸ”¥ Suppression de l'inscription
    await prisma.enrollment.delete({
      where: {
        studentId_courseId: {
          studentId,
          courseId,
        },
      },
    });

    console.log("âœ… DÃ©sinscription rÃ©ussie !");
    return NextResponse.json({ message: "DÃ©sinscription rÃ©ussie" }, { status: 200 });
  } catch (error) {
    console.error("ðŸš¨ Erreur lors de la dÃ©sinscription :", error);
    return NextResponse.json({ error: "Erreur serveur" }, { status: 500 });
  }
}
